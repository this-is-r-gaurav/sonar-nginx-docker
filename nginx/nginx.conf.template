events {}
http{
	# redirect all http traffic to https
	server {
	  listen 80 default_server;
	  listen [::]:80 default_server;
	  server_name TEMPLATE_HOST_NAME;
	  return 301 https://$host$request_uri;
	}

	server {
    server_name TEMPLATE_HOST_NAME;
		ssl_protocols TLSv1.2;
		ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
		listen 443 ssl http2;
		listen [::]:443 ssl http2;

		ssl_certificate /etc/pki/tls/sonar/sonar.crt;
		ssl_certificate_key /etc/pki/tls/sonar/sonar.key;
		ssl_prefer_server_ciphers on;
		ssl_session_timeout 1d;
		ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
		ssl_session_tickets off;
		ssl_dhparam /etc/pki/tls/sonar/dhparam.pem;


		add_header X-Frame-Options SAMEORIGIN;

		server_tokens off;

		add_header X-Frame-Options SAMEORIGIN;

		add_header X-Content-Type-Options nosniff;

		add_header X-XSS-Protection "1; mode=block";

		
		add_header Strict-Transport-Security "max-age=63072000" always;

		# OCSP stapling
		ssl_stapling off;
		ssl_stapling_verify off;

		location / {
			proxy_pass http://sonarqube:9000; #whatever port your app runs on
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_cache_bypass $http_upgrade;
      client_max_body_size 100M;        
		}
	}
}
